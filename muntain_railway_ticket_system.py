# -*- coding: utf-8 -*-
"""muntain-railway-ticket-system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tm-eo9cEAik-XWuL3uWB5njuetE34tkY
"""

class ElectricMountainRailway:
    def __init__(self):
        # Initialize data structures for total passengers and total money taken
        self.total_passengers_up = [0] * 4
        self.total_passengers_down = [0] * 4
        self.total_money_up = [0] * 4
        self.total_money_down = [0] * 4

        # Initialize available tickets for each train
        self.available_tickets_up = [80] * 4
        self.available_tickets_down = [80] * 4

    def display_screen(self):
        # Display the train times and available tickets
        print("Train Times:")
        for i in range(4):
            print(f"{9 + i * 2:02}:00 - {10 + i * 2:02}:00 | Tickets Available: {self.available_tickets_up[i]}")
            print(f"{10 + i * 2:02}:00 - {11 + i * 2:02}:00 | Tickets Available: {self.available_tickets_down[i]}")
            print("")

    def purchase_tickets(self, journey_type, departure_time, num_passengers):
        # Check if tickets are available for the specified journey
        if journey_type == "up":
            available_tickets = self.available_tickets_up
            total_passengers = self.total_passengers_up
            total_money = self.total_money_up
        elif journey_type == "down":
            available_tickets = self.available_tickets_down
            total_passengers = self.total_passengers_down
            total_money = self.total_money_down
        else:
            print("Invalid journey type. Use 'up' or 'down'.")
            return

        index = (departure_time - 9) // 2  # Calculate the index for the journey

        # Validate the number of tickets
        if num_passengers < 1 or num_passengers > available_tickets[index]:
            print("Invalid number of passengers or insufficient tickets available.")
            return

        # Calculate total cost
        ticket_price = 25
        total_cost = num_passengers * ticket_price

        # Apply group discount if applicable
        if num_passengers >= 10:
            free_tickets = num_passengers // 10
            total_cost -= free_tickets * ticket_price

        # Update data and display
        available_tickets[index] -= num_passengers
        total_passengers[index] += num_passengers
        total_money[index] += total_cost

        print(f"Tickets purchased for {journey_type} journey at {departure_time:02}:00.")
        print(f"Total cost: ${total_cost}")

    def end_of_day_summary(self):
        # Display the number of passengers and total money for each journey
        print("End of Day Summary:")
        for i in range(4):
            print(f"{9 + i * 2:02}:00 - {10 + i * 2:02}:00 | Passengers: {self.total_passengers_up[i]} | Money: ${self.total_money_up[i]}")
            print(f"{10 + i * 2:02}:00 - {11 + i * 2:02}:00 | Passengers: {self.total_passengers_down[i]} | Money: ${self.total_money_down[i]}")
            print("")

        # Calculate and display total passengers and total money for the day
        total_passengers_day = sum(self.total_passengers_up) + sum(self.total_passengers_down)
        total_money_day = sum(self.total_money_up) + sum(self.total_money_down)
        print(f"Total Passengers for the Day: {total_passengers_day}")
        print(f"Total Money for the Day: ${total_money_day}")

        # Find and display the train journey with the most passengers
        max_passengers = max(max(self.total_passengers_up), max(self.total_passengers_down))
        if max_passengers in self.total_passengers_up:
            max_journey = f"{9 + self.total_passengers_up.index(max_passengers) * 2:02}:00 - {10 + self.total_passengers_up.index(max_passengers) * 2:02}:00"
            max_journey_type = "up"
        else:
            max_journey = f"{10 + self.total_passengers_down.index(max_passengers) * 2:02}:00 - {11 + self.total_passengers_down.index(max_passengers) * 2:02}:00"
            max_journey_type = "down"

        print(f"Train journey with the most passengers: {max_journey} ({max_passengers} passengers, {max_journey_type} journey)")


# Test the program
railway = ElectricMountainRailway()

# Task 1 - Start of the day
railway.display_screen()

# Task 2 - Purchasing tickets
railway.purchase_tickets("up", 11, 15)
railway.purchase_tickets("down", 14, 25)

# Display updated screen
railway.display_screen()

# Task 3 - End of the day summary
railway.end_of_day_summary()

